mapdist(from='102 Magazine Street, Cambridge, MA', to = '41 Farnsworth Street', mode='walking')
mapdist(from='102 Magazine Street, Cambridge, MA', to = '41 Farnsworth Street', mode='driving')
sessionInfo()
4684/555
.20*555
555*0.04
library(ggmap)
packages.install("gmgmap")
packages.install("ggmap")
install.packages("ggmap")
library(ggmap)
a <- c('02459', '02139', '20002')
a
geocode(a)
install.packages('Rserve')
library(Rserve)
library(ggmap)
geocode('Strother Field, Arkansas City')
setwd('C:/Users/212590921/Documents/Projects/Aviation_SC/Farmout')
library(ggplot2)
library(dplyr)
library(plyr)
library(reshape2)
library(RColorBrewer)
library(lubridate)
library(scales)
library(data.table)
library(xda)
library(bizdays)
library(ggthemes)
library(stringi)
options(stringsAsFactors = F)
turns <- read.csv('turns_calc2.csv')
turns <- data.table(turns)
FO <- read.csv('Farmout_all_1025.csv')
wjf <- read.csv('Wjf.csv')
FO <- rbind(FO, wjf)
FO <- data.table(FO)
FO$Farm.Out.Date <- as.POSIXct(FO$Farm.Out.Date, format = '%m/%d/%Y %H:%M')
FO$Farm.In.Date <- as.POSIXct(FO$Farm.In.Date, format = '%m/%d/%Y %H:%M')
#there is trailing white space in all the farmout part numbers. Remove
FO$Part.Number <- gsub('[: :]+$', '', FO$Part.Number)
FO$Farm.In.Status <- gsub('[: :]+$', '', FO$Farm.In.Status)
FO$Vendor.Name <-gsub('[: :]+$', '', FO$Vendor.Name)
FO$PO.Number <- gsub('[: :]+$', '', FO$PO.Number)
FO$Oper.From <- gsub('[: :]+$', '', FO$Oper.From)
FO$Oper.To <- gsub('[: :]+$', '', FO$Oper.To)
Cal <- create.calendar(weekdays=c('sunday', 'saturday'), name='Cal')
ndays <- bizdays(min(FO$Farm.Out.Date, na.rm=T), max(FO$Farm.Out.Date, na.rm=T), cal = Cal)
#using active wip to get unit costs
active_wip <- read.csv('Aviation SC Active WIP_25Oct_CSF.csv',sep='\t',fileEncoding="UTF-16LE", row.names=NULL)
active_wip$Part.Number <- gsub(' ', '', active_wip$Part.Number)
active_wip$Barcode <- gsub(' ', '', active_wip$Barcode)
#find all the different unit costs for serial number / part number combination
#we could include PO Number, but there are far fewer matches, and for time being we exclude
active_wip <- data.table(active_wip)
cost_dic <- active_wip[, .(Farmout=sum(Farmout, na.rm=T)),by =c('Serial.Number', 'Part.Number', 'Unit.Cost')]
#amongst the different costs per serial number, find the median unit cost for part number
single_cost <- ddply(cost_dic, .(Part.Number), summarize, Unit.Cost=median(Unit.Cost),
Max.Cost=max(Unit.Cost), Farmout = sum(Farmout, na.rm=T))
#FO_cost <- merge(FO[Farm.In.Status %in% c('', 'FARMED IN')], cost_dic,
#by=c('Part.Number', 'Serial.No'), all.x=T)
FO_cost <- merge(FO[Farm.In.Status %in% c('', 'FARMED IN')], single_cost,
by=c('Part.Number'), all.x=T)
#we want the CSF data to be a count of items by part and PO number
FO_serial_count <- FO_cost[,.(n = length(unique(Serial.No)) * mean(Farm.Out.Qty),
Unit.Cost=ifelse(mean(Unit.Cost, na.rm=T) > 0 & !is.na(mean(Unit.Cost)), mean(Unit.Cost), mean(Max.Cost)),
Oper.From = head(Oper.From,1), Oper.To=head(Oper.To,1), site_code =head(site_code,1),
Vendor.Name = head(Vendor.Name,1), part_descrip = head(part_descrip,1)),
by=c('Part.Number', 'PO.Number')]
# in 2 steps, figure out the number of active parts. Take the latest farm in date farmin date by serial number
FO_serial_status <- FO_cost[, .(date=max(Farm.In.Date), qty=max(Farm.Out.Qty)),
by=c('Part.Number', 'PO.Number', 'Serial.No')]
#then count how many of these latest farm in dates are NA
FO_serial_status <- FO_serial_status[is.na(date), .(active=sum(qty)), by= c('Part.Number', 'PO.Number')]
#merge back with original PN/PO count
FO_serial_count <- merge(FO_serial_count, FO_serial_status, by=c('Part.Number', 'PO.Number'), all.x=T)
FO_serial_count$active[which(is.na(FO_serial_count$active))] <- 0
item_costs <- read.csv('Item attributes 2017-10-05b.csv')
item_costs <- data.table(item_costs)
library(rapportools)
item_costs$ORG_CODE <- tocamel(tolower(item_costs$ORG_CODE), upper=T)
item_costs$ORG_CODE <- mapvalues(item_costs$ORG_CODE, from=c('Hkt', 'Lmo', 'Grn', 'Emo'),
to=c('Hok', 'Lyn', 'Gnv', 'Evd'))
FO_serial_count <- merge(FO_serial_count, item_costs[,c('ITEM_NAME', 'ORG_CODE', 'STANDARD_COST')],
by.x=c('Part.Number', 'site_code'), by.y=c('ITEM_NAME', 'ORG_CODE'), all.x=T)
for(i in which(is.na(FO_serial_count$Unit.Cost) | FO_serial_count$Unit.Cost==0)){
FO_serial_count$Unit.Cost[i] <- FO_serial_count$STANDARD_COST[i]
}
detach('package:rapportools')
#some operations don't match, important for merge
turns$FO.FIRST.OP[which(nchar(turns$FO.FIRST.OP)==1)] <- paste0('00', turns$FO.FIRST.OP[which(nchar(turns$FO.FIRST.OP)==1)] )
turns$FO.FIRST.OP[which(nchar(turns$FO.FIRST.OP)==2)] <- paste0('0', turns$FO.FIRST.OP[which(nchar(turns$FO.FIRST.OP)==2)] )
turns$FO.FIRST.OP <- mapvalues(turns$FO.FIRST.OP,
from=c('5','10',  '20', '30', '40', '50' ,'70','73', '75',
'80', '92', '95', '96', '101', '102', '242', '250',
'302', '330', '370',
'382', '387', '490', '520', '550', '638', '640', '800',
'011',  '044'),
to=c('005','010', '020', '030', '040','050', '070','073', '075',
'080', '092', '095', '096', '0101', '0102', '2420', '2501',
'0302', '3301', '3700',
'3820', '387R', '490R', '0520', '0550', '6381', '0640', '0800',
'0110', '044R'))
#trailing whitespace
turns$PO.NOMENCLATURE <- gsub('[: :]+$', '', turns$PO.NOMENCLATURE)
turns$BUYER <- gsub('[: :]+$', '', turns$BUYER)
turns_summarized <- turns[, .(PO.NOMENCLATURE = head(PO.NOMENCLATURE,1),
BUYER=head(BUYER,1), SUPPLIER=head(SUPPLIER,1), Cycle=head(CYCLE.TIME,1),
min=max(min,na.rm=T), max=max(max, na.rm=T)), by=c('PART.NUMBER', 'PO.NUMBER', 'FO.FIRST.OP') ]
#this is the merge where Operation matters
FO_Turns <- merge(FO_serial_count, turns_summarized, by.x=c('Part.Number', 'PO.Number', 'Oper.From'),
by.y=c('PART.NUMBER', 'PO.NUMBER', 'FO.FIRST.OP'), all.x=T)
#isolate rows which did not match, i.e. no min cycle time value
did_not_match <- which(is.na(FO_Turns$min))
#iterate through mismatches
for (i in did_not_match){
#see if there is a match between part number and PO number
trial_merge <- merge(FO_Turns[i,1:3], turns_summarized,
by.x=c('Part.Number', 'PO.Number'), by.y=c('PART.NUMBER', 'PO.NUMBER'))
#the operation is still important, but some operations are not consistently labeled
#run fuzzy match on operations
trial_merge$dist <- mapply(adist, trial_merge$Oper.From, trial_merge$FO.FIRST.OP)
#if merge exists, go through the matches
if (nrow(trial_merge)>0){
for (j in 1:nrow(trial_merge)){
#if the fuzzy match is 1 character off, replace the
if(trial_merge$dist[j] == 1){
FO_Turns[i, (ncol(FO_serial_count)+1):ncol(FO_Turns)] <- trial_merge[,5: (ncol(trial_merge)-1)]
}
}
}
}
#add in the manual Howmet and PGT and Meyer data
howmet <- read.csv('howmet_cycles.csv')
pgt <- read.csv('PGT_cycles.csv')
meyer <- read.csv('Meyer_cycles.csv')
pgt$max <- as.integer(pgt$max)
howmet$CT <- as.integer(howmet$CT)
meyer$Lead.Time <- as.integer(meyer$Lead.Time)
#HOWMET
FO_Turns$Part.Number <- as.character(FO_Turns$Part.Number)
PN_matches <- which(FO_Turns$Part.Number %in% howmet$PN)
FO_Turns[PN_matches,c('min','max')] <- mapvalues(FO_Turns$Part.Number[PN_matches],
from=howmet$PN, to=howmet$CT)
#PGT
PN_matches2 <- which(FO_Turns$Part.Number %in% pgt$PN)
FO_Turns[PN_matches2,'min'] <- mapvalues(FO_Turns$Part.Number[PN_matches2],
from=pgt$PN, to=pgt$min)
FO_Turns[PN_matches2,'max'] <- mapvalues(FO_Turns$Part.Number[PN_matches2],
from=pgt$PN, to=pgt$max)
#MEYER
PN_matches3 <- which(FO_Turns$Part.Number %in% meyer$Part.Number)
FO_Turns[PN_matches3,c('min','max')] <- mapvalues(FO_Turns$Part.Number[PN_matches3],
from=meyer$Part.Number, to=meyer$Lead.Time)
#ignore the stupid error
#Another manual addition
FO_Turns$Unit.Cost[which(is.na(FO_Turns$Unit.Cost))] <- 0
FO_Turns$Throughput <- FO_Turns$n/ndays
#Calculate WIP opportunity, assuming 4 days transit
FO_Turns$Should_WIP <- FO_Turns$Throughput * (FO_Turns$max + 4)
FO_Turns$Active_Value <- with(FO_Turns, active * Unit.Cost)
FO_Turns$Entitlement <- with(FO_Turns, Should_WIP*Unit.Cost)
FO_Turns$Entitlement <- pmin(FO_Turns$Active_Value, FO_Turns$Entitlement)
FO_Turns$opportunity <- with(FO_Turns, (active-Should_WIP)*Unit.Cost)
FO_Turns$opportunity <- pmax(FO_Turns$opportunity, 0)
#fuzzy match on suppliers
suppliers <- read.csv('Farmout_Vendors.csv')
FO_Turns$Vendor.Name <- mapvalues(FO_Turns$Vendor.Name, from=suppliers$Original, to=suppliers$Fuzzy)
#map processes
process <- read.csv('3T17_Farmout by Process_Oct27.csv')
FO_Turns$Process <- mapvalues(FO_Turns$Vendor.Name, from=process$Vendor.Name, to=process$Commodity)
#calculate the inventory we know by site
site_total <- FO_Turns[, .(total_value=sum(active*Unit.Cost, na.rm=T)), by='site_code']
#calculate the total farmed out part units * unit cost for parts which we have real turns data
site_scope <- FO_Turns[!max %in% c(0,NA), .(scoped_value=sum(active*Unit.Cost, na.rm=T)), by='site_code']
site_scope <- merge(site_total, site_scope, by='site_code', all.x=T)
site_scope$percentage <- with(site_scope, scoped_value/total_value)
site_scope
supplier_site_scope <- FO_Turns[!max %in% c(0,NA),
.(value_with_contract_data=sum(active*Unit.Cost, na.rm=T),
entitlement=sum(Entitlement, na.rm=T),
opportunity=sum(opportunity,na.rm=T)), by=c('site_code','Vendor.Name','Process')]
View(supplier_site_scope)
supplier_site_scope[, .(Opp=sum(opportunity)), by=site_code]
sum(supplier_site_scope[, .(Opp=sum(opportunity)), by=site_code]$Opp)
setwd('Revised_Turn_times/')
write.csv(supplier_s)
write.csv(supplier_site_scope, 'Supplier_Site_Breakdown_OCT.csv', row.names=F)
turns <- read.csv('turns_calc.csv')
setwd('C:/Users/212590921/Documents/Projects/Aviation_SC/Farmout')
turns <- read.csv('turns_calc.csv')
turns <- data.table(turns)
FO <- read.csv('Farmout_all_1025.csv')
wjf <- read.csv('Wjf.csv')
FO <- rbind(FO, wjf)
FO <- data.table(FO)
FO$Farm.Out.Date <- as.POSIXct(FO$Farm.Out.Date, format = '%m/%d/%Y %H:%M')
FO$Farm.In.Date <- as.POSIXct(FO$Farm.In.Date, format = '%m/%d/%Y %H:%M')
#there is trailing white space in all the farmout part numbers. Remove
FO$Part.Number <- gsub('[: :]+$', '', FO$Part.Number)
FO$Farm.In.Status <- gsub('[: :]+$', '', FO$Farm.In.Status)
FO$Vendor.Name <-gsub('[: :]+$', '', FO$Vendor.Name)
FO$PO.Number <- gsub('[: :]+$', '', FO$PO.Number)
FO$Oper.From <- gsub('[: :]+$', '', FO$Oper.From)
FO$Oper.To <- gsub('[: :]+$', '', FO$Oper.To)
Cal <- create.calendar(weekdays=c('sunday', 'saturday'), name='Cal')
ndays <- bizdays(min(FO$Farm.Out.Date, na.rm=T), max(FO$Farm.Out.Date, na.rm=T), cal = Cal)
#using active wip to get unit costs
active_wip <- read.csv('Aviation SC Active WIP_25Oct_CSF.csv',sep='\t',fileEncoding="UTF-16LE", row.names=NULL)
active_wip$Part.Number <- gsub(' ', '', active_wip$Part.Number)
active_wip$Barcode <- gsub(' ', '', active_wip$Barcode)
#find all the different unit costs for serial number / part number combination
#we could include PO Number, but there are far fewer matches, and for time being we exclude
active_wip <- data.table(active_wip)
cost_dic <- active_wip[, .(Farmout=sum(Farmout, na.rm=T)),by =c('Serial.Number', 'Part.Number', 'Unit.Cost')]
#amongst the different costs per serial number, find the median unit cost for part number
single_cost <- ddply(cost_dic, .(Part.Number), summarize, Unit.Cost=median(Unit.Cost),
Max.Cost=max(Unit.Cost), Farmout = sum(Farmout, na.rm=T))
#FO_cost <- merge(FO[Farm.In.Status %in% c('', 'FARMED IN')], cost_dic,
#by=c('Part.Number', 'Serial.No'), all.x=T)
FO_cost <- merge(FO[Farm.In.Status %in% c('', 'FARMED IN')], single_cost,
by=c('Part.Number'), all.x=T)
#we want the CSF data to be a count of items by part and PO number
FO_serial_count <- FO_cost[,.(n = length(unique(Serial.No)) * mean(Farm.Out.Qty),
Unit.Cost=ifelse(mean(Unit.Cost, na.rm=T) > 0 & !is.na(mean(Unit.Cost)), mean(Unit.Cost), mean(Max.Cost)),
Oper.From = head(Oper.From,1), Oper.To=head(Oper.To,1), site_code =head(site_code,1),
Vendor.Name = head(Vendor.Name,1), part_descrip = head(part_descrip,1)),
by=c('Part.Number', 'PO.Number')]
# in 2 steps, figure out the number of active parts. Take the latest farm in date farmin date by serial number
FO_serial_status <- FO_cost[, .(date=max(Farm.In.Date), qty=max(Farm.Out.Qty)),
by=c('Part.Number', 'PO.Number', 'Serial.No')]
#then count how many of these latest farm in dates are NA
FO_serial_status <- FO_serial_status[is.na(date), .(active=sum(qty)), by= c('Part.Number', 'PO.Number')]
#merge back with original PN/PO count
FO_serial_count <- merge(FO_serial_count, FO_serial_status, by=c('Part.Number', 'PO.Number'), all.x=T)
FO_serial_count$active[which(is.na(FO_serial_count$active))] <- 0
item_costs <- read.csv('Item attributes 2017-10-05b.csv')
item_costs <- data.table(item_costs)
library(rapportools)
item_costs$ORG_CODE <- tocamel(tolower(item_costs$ORG_CODE), upper=T)
item_costs$ORG_CODE <- mapvalues(item_costs$ORG_CODE, from=c('Hkt', 'Lmo', 'Grn', 'Emo'),
to=c('Hok', 'Lyn', 'Gnv', 'Evd'))
FO_serial_count <- merge(FO_serial_count, item_costs[,c('ITEM_NAME', 'ORG_CODE', 'STANDARD_COST')],
by.x=c('Part.Number', 'site_code'), by.y=c('ITEM_NAME', 'ORG_CODE'), all.x=T)
for(i in which(is.na(FO_serial_count$Unit.Cost) | FO_serial_count$Unit.Cost==0)){
FO_serial_count$Unit.Cost[i] <- FO_serial_count$STANDARD_COST[i]
}
detach('package:rapportools')
#some operations don't match, important for merge
turns$FO.FIRST.OP[which(nchar(turns$FO.FIRST.OP)==1)] <- paste0('00', turns$FO.FIRST.OP[which(nchar(turns$FO.FIRST.OP)==1)] )
turns$FO.FIRST.OP[which(nchar(turns$FO.FIRST.OP)==2)] <- paste0('0', turns$FO.FIRST.OP[which(nchar(turns$FO.FIRST.OP)==2)] )
turns$FO.FIRST.OP <- mapvalues(turns$FO.FIRST.OP,
from=c('5','10',  '20', '30', '40', '50' ,'70','73', '75',
'80', '92', '95', '96', '101', '102', '242', '250',
'302', '330', '370',
'382', '387', '490', '520', '550', '638', '640', '800',
'011',  '044'),
to=c('005','010', '020', '030', '040','050', '070','073', '075',
'080', '092', '095', '096', '0101', '0102', '2420', '2501',
'0302', '3301', '3700',
'3820', '387R', '490R', '0520', '0550', '6381', '0640', '0800',
'0110', '044R'))
#trailing whitespace
turns$PO.NOMENCLATURE <- gsub('[: :]+$', '', turns$PO.NOMENCLATURE)
turns$BUYER <- gsub('[: :]+$', '', turns$BUYER)
turns_summarized <- turns[, .(PO.NOMENCLATURE = head(PO.NOMENCLATURE,1),
BUYER=head(BUYER,1), SUPPLIER=head(SUPPLIER,1), Cycle=head(CYCLE.TIME,1),
min=max(min,na.rm=T), max=max(max, na.rm=T)), by=c('PART.NUMBER', 'PO.NUMBER', 'FO.FIRST.OP') ]
#this is the merge where Operation matters
FO_Turns <- merge(FO_serial_count, turns_summarized, by.x=c('Part.Number', 'PO.Number', 'Oper.From'),
by.y=c('PART.NUMBER', 'PO.NUMBER', 'FO.FIRST.OP'), all.x=T)
#isolate rows which did not match, i.e. no min cycle time value
did_not_match <- which(is.na(FO_Turns$min))
#iterate through mismatches
for (i in did_not_match){
#see if there is a match between part number and PO number
trial_merge <- merge(FO_Turns[i,1:3], turns_summarized,
by.x=c('Part.Number', 'PO.Number'), by.y=c('PART.NUMBER', 'PO.NUMBER'))
#the operation is still important, but some operations are not consistently labeled
#run fuzzy match on operations
trial_merge$dist <- mapply(adist, trial_merge$Oper.From, trial_merge$FO.FIRST.OP)
#if merge exists, go through the matches
if (nrow(trial_merge)>0){
for (j in 1:nrow(trial_merge)){
#if the fuzzy match is 1 character off, replace the
if(trial_merge$dist[j] == 1){
FO_Turns[i, (ncol(FO_serial_count)+1):ncol(FO_Turns)] <- trial_merge[,5: (ncol(trial_merge)-1)]
}
}
}
}
#add in the manual Howmet and PGT and Meyer data
howmet <- read.csv('howmet_cycles.csv')
pgt <- read.csv('PGT_cycles.csv')
meyer <- read.csv('Meyer_cycles.csv')
pgt$max <- as.integer(pgt$max)
howmet$CT <- as.integer(howmet$CT)
meyer$Lead.Time <- as.integer(meyer$Lead.Time)
#HOWMET
FO_Turns$Part.Number <- as.character(FO_Turns$Part.Number)
PN_matches <- which(FO_Turns$Part.Number %in% howmet$PN)
FO_Turns[PN_matches,c('min','max')] <- mapvalues(FO_Turns$Part.Number[PN_matches],
from=howmet$PN, to=howmet$CT)
#PGT
PN_matches2 <- which(FO_Turns$Part.Number %in% pgt$PN)
FO_Turns[PN_matches2,'min'] <- mapvalues(FO_Turns$Part.Number[PN_matches2],
from=pgt$PN, to=pgt$min)
FO_Turns[PN_matches2,'max'] <- mapvalues(FO_Turns$Part.Number[PN_matches2],
from=pgt$PN, to=pgt$max)
#MEYER
PN_matches3 <- which(FO_Turns$Part.Number %in% meyer$Part.Number)
FO_Turns[PN_matches3,c('min','max')] <- mapvalues(FO_Turns$Part.Number[PN_matches3],
from=meyer$Part.Number, to=meyer$Lead.Time)
#ignore the stupid error
#Another manual addition
FO_Turns$Unit.Cost[which(is.na(FO_Turns$Unit.Cost))] <- 0
FO_Turns$Throughput <- FO_Turns$n/ndays
#Calculate WIP opportunity, assuming 4 days transit
FO_Turns$Should_WIP <- FO_Turns$Throughput * (FO_Turns$max + 4)
FO_Turns$Active_Value <- with(FO_Turns, active * Unit.Cost)
FO_Turns$Entitlement <- with(FO_Turns, Should_WIP*Unit.Cost)
FO_Turns$Entitlement <- pmin(FO_Turns$Active_Value, FO_Turns$Entitlement)
FO_Turns$opportunity <- with(FO_Turns, (active-Should_WIP)*Unit.Cost)
FO_Turns$opportunity <- pmax(FO_Turns$opportunity, 0)
#fuzzy match on suppliers
suppliers <- read.csv('Farmout_Vendors.csv')
FO_Turns$Vendor.Name <- mapvalues(FO_Turns$Vendor.Name, from=suppliers$Original, to=suppliers$Fuzzy)
#map processes
process <- read.csv('3T17_Farmout by Process_Oct27.csv')
FO_Turns$Process <- mapvalues(FO_Turns$Vendor.Name, from=process$Vendor.Name, to=process$Commodity)
#calculate the inventory we know by site
site_total <- FO_Turns[, .(total_value=sum(active*Unit.Cost, na.rm=T)), by='site_code']
#calculate the total farmed out part units * unit cost for parts which we have real turns data
site_scope <- FO_Turns[!max %in% c(0,NA), .(scoped_value=sum(active*Unit.Cost, na.rm=T)), by='site_code']
site_scope <- merge(site_total, site_scope, by='site_code', all.x=T)
site_scope$percentage <- with(site_scope, scoped_value/total_value)
supplier_site_scope <- FO_Turns[!max %in% c(0,NA),
.(value_with_contract_data=sum(active*Unit.Cost, na.rm=T),
entitlement=sum(Entitlement, na.rm=T),
opportunity=sum(opportunity,na.rm=T)), by=c('site_code','Vendor.Name','Process')]
sum(supplier_site_scope[, .(Opp=sum(opportunity)), by=site_code]$Opp)
setwd('C:/Users/212590921/Documents/Personal_Projects/ICM/')
options(stringsAsFactors = F)
library(plyr)
library(reshape)
library(dplyr)
library(ggplot2)
library(ggrepel)
library(data.table)
library(tidyr)
library(scales)
library(RColorBrewer)
library(effects)
report <- read.csv('ICM Donations Report 20171010.csv')
report <- data.table(report)
report <- report[!is.na(report$Amount)]
report$Close.Date <- as.Date(report$Close.Date, format='%m/%d/%Y')
report <- report[order(Close.Date)]
intro <- read.csv('Intro to ICM.csv')
names(report)
names(intro)
activities <- read.csv('ICM Activities Data.csv')
activities <- data.table(activities)
by_donor <- report[Contact..Contact.ID != '' , .(n=length(Amount), total=sum(Amount), first=head(Amount,1),
ave = mean(Amount)),
by=Contact..Contact.ID]
by_donor <- report[Contact.ID != '' , .(n=length(Amount), total=sum(Amount), first=head(Amount,1),
ave = mean(Amount)),
by=Contact..Contact.ID]
names(report)
head(report)
nrow(report)
length(unique(report$Household..Household.ID))
nrow(activities)
nrow(intro)
length(unique(intro$Contact.ID))
head(intro)
table(intro$Introduction.to.ICM)
length(unique(intro$Organization.ID))
head(report)
table(report$Household..Household.ID)
head(sort(table(report$Household..Household.ID), decreasing=T)
)
head(report)
first_donation <- report[Household..Household.ID != '', .(first_date = min(Close.Date), n=length(Close.Date)),
by=Household..Household.ID]
first_donation$year <- format(first_donation$first_date, '%Y')
head(first_donation)
table(first_donation$year)
seq('2004-06-01', 365)
seq('2004-06-01', '2016-06-01', 365)
seq(as.Date('2004-06-01'), as.Date('2016-06-01'), 365)
first_donation$year <- cut(first_donation$first_date, c(-Inf, seq(as.Date('2004-06-01'), as.Date('2016-06-01'), 365), Inf))
c(-Inf, seq(as.Date('2004-06-01'), as.Date('2016-06-01'), 365), Inf)
first_donation$year <- cut(first_donation$first_date,
c(seq(as.Date('2003-06-01'), as.Date('2017-06-01'), 'years')))
c(seq(as.Date('2003-06-01'), as.Date('2017-06-01'), 'years'))
head(first_donations)
head(first_donation)
View(first_donation)
first_donation$year <- cut(first_donation$first_date,
c(seq(as.Date('2003-06-01'), as.Date('2017-06-01'), 'years')),
paste0('FY', 2003:2017))
table(first_donation$year)
first_donation$year <- cut(first_donation$first_date,
c(seq(as.Date('2003-06-01'), as.Date('2017-06-01'), 'years')),
paste0('FY', 2003:2016))
table(first_donation$year)
View(first_donation)
tail(first_donation)
first_donation$year <- cut(first_donation$first_date,
c(seq(as.Date('2003-06-01'), as.Date('2018-06-01'), 'years')),
paste0('FY', 2003:2017))
table(first_donation$year)
first_donation <- report[Household..Household.ID != '', .(first_date = min(Close.Date), last_date=max(Close.Date),
n=length(Close.Date)),
by=Household..Household.ID]
first_donation$year <- cut(first_donation$first_date,
c(seq(as.Date('2003-06-01'), as.Date('2018-06-01'), 'years')),
paste0('FY', 2003:2017))
first_donation$first_year <- cut(first_donation$first_date,
c(seq(as.Date('2003-06-01'), as.Date('2018-06-01'), 'years')),
paste0('FY', 2003:2017))
first_donation$last_year <- cut(first_donation$last_date,
c(seq(as.Date('2003-06-01'), as.Date('2018-06-01'), 'years')),
paste0('FY', 2003:2017))
table(first_donation$first_year)
table(first_donation[first_year=='FY2013']$last_year)
63+49+61+40
table(first_donation[first_year=='FY2014']$last_year)
47+50+39
table(first_donation[first_year=='FY2015']$last_year)
table(first_donation[first_year=='FY2016']$last_year)
report$FY <- cut(report$Close.Date,
c(seq(as.Date('2003-06-01'), as.Date('2018-06-01'), 'years')),
paste0('FY', 2003:2017))
head(report)
donation_years <- report[, .(total=sum(Amount), ave=mean(Amount), n=length(unique(Household..Household.ID)),
by=FY)]
donation_years
donation_years <- report[, .(total=sum(Amount), ave=mean(Amount),
n=length(unique(Household..Household.ID))),
by=FY]
donation_years
head(activities)
summary(report$Amount)
1.5e6
report$cut <- cut(report$Amount, c(0, 20000, 80000, 1.5e5, Inf), c('0-20k' '20-80k', '80-150k', '150k+'))
report$cut <- cut(report$Amount, c(0, 20000, 80000, 1.5e5, Inf),
c('0-20k', '20-80k', '80-150k', '150k+'))
head(report)
report[,.(total=sum(Amount), av=mean(Amount)), by=cut]
report[,.(total=sum(Amount), av=mean(Amount)), by=c('cut', 'FY')]
bands <- report[,.(total=sum(Amount), av=mean(Amount)), by=c('cut', 'FY')]
bands.cast <- dcast(bands, cut ~ FY, value.var = c('total', 'av'))
bands.cast
bands <- report[FY %in% c('FY2013', 'FY2014', 'FY2015', 'FY2016', 'FY2017'),.(total=sum(Amount), av=mean(Amount)), by=c('cut', 'FY')]
bands.cast <- dcast(bands, cut ~ FY, value.var = c('total', 'av'))
bands.cast
write.csv(bands.cast, 'bands_2017.csv', row.names=F)
bands
bands <- bands[!is.na(cut)]
ggplot(bands) + geom_col(aes(x=total, y=FY)) + facet_grid(cut~.)
head(bands$total)
ggplot(bands) + geom_col(aes(x=FY, y=total)) + facet_grid(cut~.)
ggplot(bands) + geom_col(aes(x=FY, y=total)) + facet_grid(cut~., scales='free')
ggplot(bands) + geom_col(aes(x=FY, y=total, fill=av)) + facet_grid(cut~., scales='free')
ggplot(bands) + geom_col(aes(x=FY, y=total)) + facet_grid(cut~., scales='free') +
scale_y_continuous(label=dollar) +
theme(panel.background = element_blank())
theme(panel.background = element_blank(), plot.title=element_text(hjust=0.5))
ggplot(bands) + geom_col(aes(x=FY, y=total)) + facet_grid(cut~., scales='free') +
scale_y_continuous(label=dollar) + ggtitle('DOnatiosn by Year and Band') +
theme(panel.background = element_blank(), plot.title=element_text(hjust=0.5))
head(bands.cast)
ggplot(bands) + geom_col(aes(x=FY, y=total)) + facet_grid(cut~., scales='free') +
scale_y_continuous(label=dollar) + ggtitle('Donations by Year and Band') +
theme(panel.background = element_blank(), plot.title=element_text(hjust=0.5))
ggplot(bands) + geom_col(aes(x=FY, y=total, fill=FY)) + facet_grid(cut~., scales='free') +
scale_y_continuous(label=dollar) + ggtitle('Donations by Year and Band') +
geo_text(aes(x=FY, y=total/2, label=av)) +
theme(panel.background = element_blank(), plot.title=element_text(hjust=0.5))
ggplot(bands) + geom_col(aes(x=FY, y=total, fill=FY)) + facet_grid(cut~., scales='free') +
scale_y_continuous(label=dollar) + ggtitle('Donations by Year and Band') +
geom_text(aes(x=FY, y=total/2, label=av)) +
theme(panel.background = element_blank(), plot.title=element_text(hjust=0.5))
ggplot(bands) + geom_col(aes(x=FY, y=total, fill=FY)) + facet_grid(cut~., scales='free') +
scale_y_continuous(label=dollar) + ggtitle('Donations by Year and Band') +
geom_text(aes(x=FY, y=total/2, label=dollar(av))) +
theme(panel.background = element_blank(), plot.title=element_text(hjust=0.5))
ggplot(bands) + geom_col(aes(x=FY, y=total, fill=FY)) + facet_grid(cut~., scales='free') +
scale_y_continuous(label=dollar) + ggtitle('Donations by Year and Band') +
geom_text(aes(x=FY, y=0, label=dollar(av))) +
theme(panel.background = element_blank(), plot.title=element_text(hjust=0.5))
ggplot(bands) + geom_col(aes(x=FY, y=total, fill=FY)) + facet_grid(cut~., scales='free') +
scale_y_continuous(label=dollar) + ggtitle('Donations by Year and Band') +
geom_text(aes(x=FY, y=0, label=dollar(av)), vjust=1) +
theme(panel.background = element_blank(), plot.title=element_text(hjust=0.5))
ggplot(bands) + geom_col(aes(x=FY, y=total, fill=FY)) + facet_grid(cut~., scales='free') +
scale_y_continuous(label=dollar) + ggtitle('Donations by Year and Band') +
geom_text(aes(x=FY, y=0, label=dollar(av)), vjust=-1) +
theme(panel.background = element_blank(), plot.title=element_text(hjust=0.5))
ggplot(bands) + geom_col(aes(x=FY, y=av, fill=FY)) + facet_grid(cut~., scales='free') +
scale_y_continuous(label=dollar) + ggtitle('Donations by Year and Band') +
geom_text(aes(x=FY, y=0, label=dollar(total)), vjust=-1) +
theme(panel.background = element_blank(), plot.title=element_text(hjust=0.5))
ggplot(bands) + geom_col(aes(x=FY, y=total, fill=FY)) + facet_grid(cut~.) +
scale_y_continuous(label=dollar) + ggtitle('Donations by Year and Band') +
geom_text(aes(x=FY, y=0, label=dollar(av)), vjust=-1) +
theme(panel.background = element_blank(), plot.title=element_text(hjust=0.5))
ggsave('Bands_Plot.jpeg', width=10, height=9, dpi=650)
